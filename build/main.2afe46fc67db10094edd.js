"use strict";(self.webpackChunkBlog_System=self.webpackChunkBlog_System||[]).push([[1],{0:(e,t,o)=>{var n=o(1),s=o(3),r=o(5),a=o(21),d=o(20),u=o(10),c=o(27),i=o(60);const l=(0,a.UY)({authReducer:c.ZP,[u.Gg.reducerPath]:u.Gg.reducer,[i.ZP.reducerPath]:i.ZP.reducer}),m=(0,d.xC)({reducer:l,middleware:e=>e().concat(u.Gg.middleware).concat(i.ZP.middleware)});var h=o(12),y=o(61);const g=(0,s.lazy)((()=>o.e(3).then(o.bind(o,64)))),p=document.getElementById("root");r.createRoot(p).render((0,n.jsx)(s.Suspense,Object.assign({fallback:(0,n.jsx)("div",{children:"Loading..."})},{children:(0,n.jsx)(h.zt,Object.assign({store:m},{children:(0,n.jsx)(y.UT,{children:(0,n.jsx)(s.Suspense,Object.assign({fallback:(0,n.jsx)("div",{children:"Loading..."})},{children:(0,n.jsx)(g,{})}))})}))})))},27:(e,t,o)=>{o.d(t,{ZP:()=>b,bW:()=>c,dZ:()=>i,l7:()=>P,rW:()=>p,ts:()=>m,x4:()=>l});var n=o(20),s=o(28),r=o.n(s),a=o(26),d=function(e,t,o,n){return new(o||(o=Promise))((function(s,r){function a(e){try{u(n.next(e))}catch(e){r(e)}}function d(e){try{u(n.throw(e))}catch(e){r(e)}}function u(e){var t;e.done?s(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,d)}u((n=n.apply(e,t||[])).next())}))};const u="token",c=()=>localStorage.getItem(u),i=()=>localStorage.removeItem(u),l=e=>d(void 0,void 0,void 0,(function*(){try{const t=yield r().post(`${a.Z}/login`,e),o=t.data,{ok:n,token:s}=o;return 0===n?t.data:((e=>{localStorage.setItem(u,e)})(s),o)}catch(e){throw new Error(e.message)}})),m=(0,n.hg)("getCurrentUser",((e,t)=>d(void 0,void 0,void 0,(function*(){try{const e=c();return(yield r().get(`${a.Z}/me`,{headers:{authorization:`Bearer ${e}`}})).data.data}catch(e){const o=e.toString();return t.rejectWithValue(o)}})))),h=(0,n.oM)({name:"authSlice",initialState:{userInfo:{id:null,username:null},isLoading:!1,errorMessage:null,isLoginSuccess:!1},reducers:{showLoginSuccess:(e,t)=>{e.isLoginSuccess=t.payload},removeCurrentUser:e=>{e.userInfo={id:null,username:null}}},extraReducers:e=>{e.addCase(m.pending,(e=>{e.isLoading=!0,e.errorMessage=null,e.isLoginSuccess=!1})),e.addCase(m.fulfilled,((e,t)=>{e.isLoading=!1,e.userInfo=t.payload})),e.addCase(m.rejected,((e,t)=>{e.errorMessage=t.payload}))}}),{reducer:y,actions:g}=h,{showLoginSuccess:p,removeCurrentUser:P}=g,b=y},60:(e,t,o)=>{o.d(t,{Jb:()=>d,ZP:()=>l,oR:()=>c,so:()=>i,y8:()=>u});var n=o(11),s=o(23),r=o(26);const a=(0,n.LC)({reducerPath:"commentsAPI",baseQuery:(0,s.ni)({baseUrl:r.Z}),endpoints:e=>({sendNewComment:e.mutation({query:({currentUser:e,comment:t,postID:o})=>({url:"/comments",method:"POST",body:{author:e.username,content:t,createdAt:Date.now(),postID:o,userID:e.id}})}),loadComments:e.query({query:e=>"all"!==e?`/comments?${e}`:"/comments?_sort=createdAt&_order=desc"}),updateComment:e.mutation({query:({id:e,content:t})=>({url:`/comments/${e}`,method:"PATCH",body:{content:t,updateAt:Date.now()}})}),deleteComment:e.mutation({query:e=>({url:`/comments/${e}`,method:"DELETE"})})})}),{useSendNewCommentMutation:d,useLoadCommentsQuery:u,useUpdateCommentMutation:c,useDeleteCommentMutation:i}=a,l=a},26:(e,t,o)=>{o.d(t,{Z:()=>n});const n="http://localhost:3000"},10:(e,t,o)=>{o.d(t,{Bq:()=>c,Gg:()=>a,jn:()=>i,mr:()=>u,tD:()=>d});var n=o(11),s=o(23),r=o(26);const a=(0,n.LC)({reducerPath:"postsAPI",baseQuery:(0,s.ni)({baseUrl:r.Z}),endpoints:e=>({sendNewPost:e.mutation({query:({userInfo:e,post:t})=>({url:"/posts",method:"POST",body:{title:t.title,body:t.content,createdAt:Date.now(),author:e.username,userID:e.id}})}),loadPosts:e.query({query:e=>"all"!==e?`/posts?${e}`:"/posts?_sort=createdAt&_order=desc"}),updatePost:e.mutation({query:e=>({url:`/posts/${e.ID}`,method:"PATCH",body:{title:e.title,body:e.body}})}),deletePost:e.mutation({query:e=>({url:`/posts/${e}`,method:"DELETE"})})})}),{useSendNewPostMutation:d,useLoadPostsQuery:u,useUpdatePostMutation:c,useDeletePostMutation:i}=a}},e=>{e.O(0,[0],(()=>(0,e(e.s=0)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,